import streamlit as st
import pandas as pd


st.title('An√°lise de Devedores Qualificados')
st.write(
    "Este aplicativo permite fazer uma avalia√ß√£o de poss√≠veis candidatos a cobran√ßa qualificada baseada em algoritmos de aprendizagem de m√°quina semi supervisionado.")

DATE_COLUMN = 'date/time'
DATA_URL = ('https://s3-us-west-2.amazonaws.com/'
            'streamlit-demo-data/uber-raw-data-sep14.csv.gz')


@st.cache
def load_data(nrows):
    data = pd.read_csv(DATA_URL, nrows=nrows)
    lowercase = lambda x: str(x).lower()
    data.rename(lowercase, axis='columns', inplace=True)
    data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])
    return data


@st.cache
def get_data():
    return pd.read_csv('dfs/complementar_para_streamlit_01.csv',
                       usecols=colunas_01,
                       index_col=False
                       )


lista_colunas = ['CNPJ/CPF Base', 'Raz√£o Social', 'Comarca']

data0 = pd.read_csv("dfs/complementar_para_streamlit_01.csv", usecols=lista_colunas)
data2 = pd.read_csv("dfs/complementar_para_streamlit_01.csv", usecols=lista_colunas)
data3 = pd.read_csv("dfs/complementar_para_streamlit_01.csv", usecols=lista_colunas)


dados = [data2, data3]

colunas_01 = ['CNPJ/CPF Base', 'Raz√£o Social', 'Comarca']

df = get_data()

st.subheader("Informe o(s) n√∫clo(es) e a comarca da qual faz parte")
nucleos = ['PROIN - Procuradoria do Interior',
           'PROFIS-NAFE - N√∫cleo de A√ß√µes Fiscais Estrat√©gicas',
           'PROFIS-NEF - N√∫cleo de Execu√ß√£o Fiscal',
           'PROFIS-NRJ - N√∫cleo de Representa√ß√£o Judicial']
opcoes_nucleos = st.selectbox('Informe o(s) n√∫clo(es) do qual faz parte:',
                              options=nucleos)

comarcas = df["Comarca"].unique()
comarcas_proin = df["Comarca"].loc[(df["Comarca"] != "SALVADOR") & \
                                   (df["Comarca"] != "LAURO DE FREITAS") & \
                                   (df["Comarca"] != "Comarca de Sim√µes Filho") & \
                                   (df["Comarca"] != 'CAMA√áARI') & \
                                   (df["Comarca"] != 'CANDEIAS') & \
                                   (df["Comarca"] != 'DIAS D AVILA') & \
                                   (df["Comarca"] != 'SIMOES FILHO') & \
                                   (df["Comarca"] != 'Comarca de Salvador') & \
                                   (df["Comarca"] != 'Comarca de Lauro De Freitas') & \
                                   (df["Comarca"] != 'Comarca de Dias D ?vila') & \
                                   (df["Comarca"] != 'Comarca de Cama?ari') & \
                                   (df["Comarca"] != 'Comarca de Cama√ßari') & \
                                   (df["Comarca"] != 'Lauro De Freitas')

                                   ].unique()


# st.write('You selected:', opcoes_comarca)

def exposicao_nucelos():
    if opcoes_nucleos == 'PROIN - Procuradoria do Interior':

        opcoes_comarca = st.selectbox("Selecione sua comarca de atua√ß√£o",
                                      options=comarcas_proin)

        st.subheader("1) Dados Candidatos")
        if st.checkbox("Visalizar lista de candidatos:"):
            comload = data2.loc[data2['Comarca'] == opcoes_comarca]
            st.write(comload)
            st.write(f"{comload['CNPJ/CPF Base'].count()} ocorr√™ncias")

        st.subheader('2) Selecione quem analisar:')
        st.write(f"Comarca: {opcoes_comarca}")

        comload_proin = data2['Raz√£o Social'].loc[data2['Comarca'] == opcoes_comarca].to_list()
        # st.write(comload_proin)
        selecionados_ = st.selectbox('Digite a Raz√£o Social ou CNPJ:', comload_proin)
        selected_rows = data2.loc[data2["Raz√£o Social"] == selecionados_]
        st.write('Raz√£o Social Selecionada:', selected_rows)

    if opcoes_nucleos != 'PROIN - Procuradoria do Interior':
        comarcas_PROFIS = st.selectbox("Selecione sua comarca de atua√ß√£o",
                                       options=comarcas)

        st.subheader("1) Dados Candidatos")

        if st.checkbox("Visalizar lista de candidatos:"):
            candidatos_n_proin = df.loc[df['Comarca'] == comarcas_PROFIS]
            st.write(candidatos_n_proin)
            st.write(f"{candidatos_n_proin['CNPJ/CPF Base'].count()} ocorr√™ncias")

        st.subheader('2) Selecione quem analisar:')
        st.write(f"Comarca: {comarcas_PROFIS}")

        comload_proin = df['Raz√£o Social'].loc[df['Comarca'] == comarcas_PROFIS].to_list()
        selecionados_ = st.selectbox('Digite a Raz√£o Social ou CNPJ:', comload_proin)
        selected_rows = df.loc[df["Raz√£o Social"] == selecionados_]
        st.write('Raz√£o Social Selecionada:', selected_rows)
        st.write("Dios mio!")


exposicao_nucelos()
# if st.checkbox("Ver sum√°rio dos dados"):


opcoes = ["Raz√£o Social", "CNPJ"]

# select_razao = st.selectbox('Digite a Raz√£o Social ou CNPJ:', data2["Raz√£o Social"], index=0)
# selected_rows = data2.loc[data2["Raz√£o Social"] == select_razao]


#####################
# SIDE BAR

with st.sidebar:
    st.info(
        "üéà **NOVIDADE:** Voc√™ agora deve escolher que quais n√∫cleos voc√™ faz parte, antes de realizar sua avalia√ß√£o..")

    st.header('Passos para sua Avalia√ß√£o:')

    st.markdown("""
        - Para fazer sua avalia√ß√£o identifique as informa√ß√µes em documentos, autos do processo, e/ou em sistemas (ex. PGE.NET, Sigat, etc.) 
        - Na coluna principal, marque as respostas e fa√ßa observa√ß√µes de sua avalia√ß√£o (se for o caso)
        - Atribua um score de ader√™ncia a uma qualifica√ß√£o do devedor, de 1 a 5, sendo 1 muito baixo e muito alto.


        [ver minhas avalia√ß√µes](#)
    """)

# PERGUNTAS

with st.form(key='questionario'):
    st.write('### 3) Pontue as raz√µes da sua avalia√ß√£o')
    resp_01 = ["Sim", "N√£o"]
    st.radio(
        'H√° dificuldade de localiza√ß√£o do devedor para cita√ß√£o (de prefer√™ncia, usar processos mais recentes como refer√™ncia)?',
        resp_01)

    resp_02 = ["Sim", "N√£o"]
    q01 = st.empty()
    q01.radio('No geral, o devedor apresenta garantia nas execu√ß√µes (independente do tipo)?', resp_02, 0)

    resp_03 = ["Sim", "N√£o"]
    st.radio(
        'Caso POSITIVA a resposta anterior, a garantia apresentada nas execu√ß√µes √© boa(dinheiro, fian√ßa ou seguro garantia)?',
        resp_01)

    resp_04 = ["Sim", "N√£o"]
    st.radio('Caso negativa a resposta anterior, a garantia apresentada foi aceita?', resp_02)

    resp_05 = ["Sim", "N√£o"]
    st.radio('J√° houve tentativa de Bacen-Jud em face do devedor?', resp_01)

    resp_06 = ["Sim, totalmente",
               "Sim, parcialmente (acima de 50% do valor do d√©bito)",
               "Sim, parcialmente (abaixo de 50% do valor do d√©bito)",
               "N√£o"]

    st.radio('Caso Positiva a resposta anterior, a ordem foi frut√≠fera?', resp_06)

    st.write('### 4) Complemente sua avalia√ß√£o:')
    st.write('Observa√ß√µes sobre sua avalia√ß√£o que extrapolam as prguntas acima.')
    obs = st.text_area("Conclus√£o da Avalia√ß√£o:", "Sua observa√ß√£o")

    st.write('### 5) Score Final:')
    st.write(
        'Atribua um score para sua percep√ß√£o para a qualifica√ß√£o do devedor, sendo 1 um score muito baixo, e 5 muito alto')
    score_aderencia = st.slider(label='Socre Ader√™ncia:', min_value=0, max_value=5, value=0, step=1, format='%f')

    submeter = st.form_submit_button("Submeter Avalia√ß√£o")
    st.markdown("""
    [ver minhas avalia√ß√µes](#)
    """)
